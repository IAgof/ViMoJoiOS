//
//  ProjectDetailsPresenter.swift
//  vimojo
//
//  Created Alejandro Arjonilla Garcia on 18/2/18.
//  Copyright © 2018 Videona. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import VideonaProject
import CoreLocation

struct ProjectInfoVideoModel {
    let title: String
    let date: String
    let author: String
    let location: String
    let description: String
    let resolution: String
    let frameRate: String
    let quality: String
    let duration: String
    let kindOfProjectsSelected: NSAttributedString
}
extension Project {
    private var formatText: (String, String) -> String {
        return { prefix, sufix in
            return prefix
                .addColons()
                .addSpace()
                .appending(sufix)
        }
    }
    var viewModel: ProjectInfoVideoModel {
        return ProjectInfoVideoModel(title: projectInfo.title,
                                     date: formatText("date_label".localized(.projectDetails), projectInfo.date.dateString()),
                                     author: formatText("author_label".localized(.projectDetails), projectInfo.author),
                                     location: formatText("location_label".localized(.projectDetails), projectInfo.location),
                                     description: formatText("description_label".localized(.projectDetails), projectInfo.description),
                                     resolution: getProfile().getResolution(),
                                     frameRate: formatText("frame_rate_label".localized(.projectDetails), getProfile().frameRate.string),
                                     quality: formatText("quality_label".localized(.projectDetails), getProfile().getQuality()),
                                     duration: formatText("duration_label".localized(.projectDetails), getDuration().string),
                                     kindOfProjectsSelected: projectsSelectedTexts)
    }
    private var projectsSelectedTexts: NSAttributedString {
        var arrayString: [String] = []
        if projectInfo.liveOnTape { arrayString.append("product_type_live_on_tape".localized(.projectDetails)) }
        if projectInfo.bRoll { arrayString.append("product_type_b_roll".localized(.projectDetails)) }
        if projectInfo.natVO { arrayString.append("product_type_nat_vo".localized(.projectDetails)) }
        if projectInfo.interview { arrayString.append("product_type_interview".localized(.projectDetails)) }
        if projectInfo.graphics { arrayString.append("product_type_graphics".localized(.projectDetails)) }
        if projectInfo.piece { arrayString.append("product_type_piece".localized(.projectDetails)) }
        
        let attrString: NSMutableAttributedString = NSMutableAttributedString(string: "project_type_label".localized(.projectDetails))
        attrString.addAttribute(NSForegroundColorAttributeName, value: UIColor.black, range: NSMakeRange(0, attrString.length))
        let descString: NSMutableAttributedString = NSMutableAttributedString(string:  arrayString.reduce("", { "\($0) \($1)" }))
        descString.addAttribute(NSForegroundColorAttributeName, value: configuration.mainColor, range: NSMakeRange(0, descString.length))
        attrString.append(descString)
        return attrString
    }
}
class ProjectDetailsPresenter: ProjectDetailsPresenterProtocol {

    weak private var view: ProjectDetailsViewProtocol?
    var interactor: ProjectDetailsInteractorProtocol?
    private let router: ProjectDetailsWireframeProtocol

    init(interface: ProjectDetailsViewProtocol,
         interactor: ProjectDetailsInteractorProtocol?,
         router: ProjectDetailsWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }
    func loadValues(loaded: (ProjectInfoVideoModel) -> Void) {
        guard let project = interactor?.project else { return }
        loaded(project.viewModel)
    }
    func saveValues(title: String?, location: String?, description: String?) {
        interactor?.saveValues(title: title, location: location, description: description)
        router.dismiss()
    }
    func cancel() {
        router.dismiss()
    }
    func getLocation(location: @escaping (String) -> Void) {
        interactor?.getLocation(location: { (newLocation) in
            let geocoder = CLGeocoder()
            guard let newLocation = newLocation else {
                location("Can't update location")
                return
            }
            geocoder.reverseGeocodeLocation(newLocation, completionHandler: { (placeMark, error) in
                if let placeMark = placeMark,
                    let firstPlaceMark = placeMark.first{
                    location("\(firstPlaceMark.city.notNil),\(firstPlaceMark.country.notNil)")
                } else {
location("Can't update location")
                }
            })
        })
    }
    func goToSelectKindOfProject() {
        router.goToSelectKindOfProject()
    }
}

extension CLPlacemark {
    var city: String? {
        return addressDictionary?["City"] as? String
    }
}
