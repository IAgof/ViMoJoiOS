//
//  ProjectDetailsPresenter.swift
//  vimojo
//
//  Created Alejandro Arjonilla Garcia on 18/2/18.
//  Copyright © 2018 Videona. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import VideonaProject
import CoreLocation

class ProjectDetailsPresenter: ProjectDetailsPresenterProtocol {
    
    weak private var view: ProjectDetailsViewProtocol?
    var interactor: ProjectDetailsInteractorProtocol?
    private let router: ProjectDetailsWireframeProtocol
    // MARK: format variables
    
    
    init(interface: ProjectDetailsViewProtocol,
         interactor: ProjectDetailsInteractorProtocol?,
         router: ProjectDetailsWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }
    func loadValues(loaded: (ProjectInfoVideoModel) -> Void) {
        guard let project = interactor?.project else { return }
        loaded(ProjectInfoVideoModel(project: project))
    }
    func saveValues(title: String?, location: String?, description: String?) {
        interactor?.saveValues(title: title, location: location, description: description)
        router.dismiss()
    }
    func cancel() {
        router.dismiss()
    }
    func getLocation(location: @escaping (String) -> Void) {
        interactor?.getLocation(location: { (newLocation) in
            let geocoder = CLGeocoder()
            guard let newLocation = newLocation else {
                location("Can't update location")
                return
            }
            geocoder.reverseGeocodeLocation(newLocation, completionHandler: { (placeMark, error) in
                if let placeMark = placeMark,
                    let firstPlaceMark = placeMark.first{
                    location("\(firstPlaceMark.city.notNil),\(firstPlaceMark.country.notNil)")
                } else {
                    location("Can't update location")
                }
            })
        })
    }
    func goToSelectKindOfProject(title: String?, location: String?, description: String?) {
        interactor?.saveValues(title: title, location: location, description: description)
        router.goToSelectKindOfProject()
    }
}

extension Double {
    var formattedTime: String {
        var formattedTime = "00:00:00"
        if self > 0 {
            let hours = Int(self / 3600)
            let minutes = Int(truncatingRemainder(dividingBy: 3600) / 60)
            let seconds = Int(truncatingRemainder(dividingBy: 3600))
            formattedTime = String(hours) + ":" + (minutes < 10 ? "0" + String(minutes) : String(minutes)) + ":" + (seconds < 10 ? "0" + String(seconds) : String(seconds))
        }
        return formattedTime
    }
}

extension CLPlacemark {
    var city: String? {
        return addressDictionary?["City"] as? String
    }
}
